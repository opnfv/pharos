#!/usr/bin/env python3
##############################################################################
# Copyright (c) 2015 Todd Gaunt and others.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

import yaml
import threading
import queue
import argparse
import logging
import os
import sys

from pharosvalidator import server
from pharosvalidator import node

def main():
    logger = logging.getLogger(__name__)
    parser = argparse.ArgumentParser( \
            description='Evaluates a system against the pharos specification')
    subparsers = parser.add_subparsers(help="subcommand to run.")

    parser.add_argument('-q', '--quiet',
                        action="store_true", default=False,
                        help='Disable console output')

    parser.add_argument('-v', '--verbose',
                        action="store_true", default=False,
                        help='Enable debugging level output')

    parser.add_argument('-o', '--output',
                        type=str, default="/var/log/pharosvalidator/pharosvalidator.log",
                        help='Path to where the program should write it\'s logfile')

    parser.add_argument('-p', '--port',
                        type=str, default=12121,
                        help='Port of the validation-server')

    parser.add_argument('-t', metavar='--test-output',
                        type=str, default="/tmp/pharos-tests.log",
                        help='Path to where the program should write it\'s test logs')

    ## SERVER ARGS
    parser_server = subparsers.add_parser("server", help='evaluates a system against the pharos specification')

    parser_server.add_argument('-I', '--inventory-config',
                        type=str, default="/etc/pharosvalidator/inventory.yaml",
                        help='Pharos Inventory Configuration file path')

    parser_server.add_argument('-N', '--network-config',
                        type=str, default="/etc/pharosvalidator/network.yaml",
                        help='Pharos Network Configuration file path')

    parser_server.add_argument('-D', '--dhcpfile',
                        type=str, default="/etc/dhcp/dhcpd.conf",
                        help='Path to where the system dhcpfile should be written')

    parser_server.add_argument('-d', '--dhcp-init',
                        type=str, default="systemctl restart dhcpd.service",
                        help='System command to start the dhcpd service, e.g. \"systemctl start dhcpd.service\"')

    parser_server.set_defaults(func=server.run)

    ## NODE ARGS
    parser_node = subparsers.add_parser("node", help='Run validation tests on a node')

    parser_node.add_argument('--version',
                        action="store_true", default=False,
                        help='display version then exit')

    parser_node.add_argument('-H', '--host',
                        type=str, default="0.0.0.0",
                        help='Address of the validation server the test results should be uploaded to')

    parser_node.add_argument('test', metavar='test',
                        type=str,
                        help='Which test should be run ["hardware", "network"]')

    parser_node.set_defaults(func=node.run)

    args = parser.parse_args(sys.argv[1:])

    # Determine the logging level
    loglevel = logging.INFO
    if args.verbose:
        loglevel = logging.DEBUG
    if args.quiet:
        loglevel = logging.CRITICAL

    try:
        os.mkdir("/var/log/pharosvalidator")
    except FileExistsError as e:
        pass
    logfile = args.output

    # Add a file handler to the default logger
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    # Configure the root logger
    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.setLevel(loglevel)
    stdout_handler.setFormatter(formatter)
    rl_handler = logging.FileHandler(logfile)
    rl_handler.setFormatter(formatter)

    root_logger = logging.getLogger()
    root_logger.addHandler(rl_handler)
    root_logger.addHandler(stdout_handler)
    root_logger.setLevel(loglevel)

    # Run the subcommand
    try:
        args.func(args)
    except AttributeError as a:
        args.func(args)
        parser.print_help()

if __name__ == "__main__":
    main()
